[{"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/index.js":"1","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/App.js":"2","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Login/index.js":"3","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Dashboard/index.js":"4","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/services/api.js":"5","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/routes.js":"6","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Register/index.js":"7","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/EventsPage/index.js":"8"},{"size":223,"mtime":1611889432279,"results":"9","hashOfConfig":"10"},{"size":297,"mtime":1611891609857,"results":"11","hashOfConfig":"10"},{"size":2338,"mtime":1611891401851,"results":"12","hashOfConfig":"10"},{"size":259,"mtime":1611889267234,"results":"13","hashOfConfig":"10"},{"size":117,"mtime":1611887993670,"results":"14","hashOfConfig":"10"},{"size":663,"mtime":1611889461039,"results":"15","hashOfConfig":"10"},{"size":2138,"mtime":1611889358958,"results":"16","hashOfConfig":"10"},{"size":4179,"mtime":1611891347774,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"awv6uh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/index.js",[],["37","38"],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/App.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Login/index.js",["39"],"import React, { useState } from 'react';\nimport api from '../../services/api'\nimport { Alert, Container, Button, Form, FormGroup, Input } from 'reactstrap';\n\nexport default function Login({ history }) {\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [error, setError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(\"false\")\n\n    const handleSubmit = async evt => {\n        evt.preventDefault();\n        const response = await api.post('/login', { email, password })\n        const userId = response.data._id || false;\n\n        try {\n            if (userId) {\n                localStorage.setItem('user', userId)\n                history.push('/dashboard')\n            } else {\n                const { message } = response.data\n                setError(true)\n                setErrorMessage(message)\n                setTimeout(() => {\n                    setError(false)\n                    setErrorMessage(\"\")\n                }, 2000)\n            }\n        } catch (error) {\n\n        }\n    }\n\n    return (\n        <Container>\n            <h2>Login:</h2>\n            <p>Please <strong>Login</strong> into your account</p>\n            <Form onSubmit={handleSubmit}>\n                <div className=\"input-group\">\n                <FormGroup className=\"form-group-\"></FormGroup>\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                    <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Your email\" onChange={evt => setEmail(evt.target.value)} />\n                </FormGroup>\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                    <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Your password\" onChange={evt => setPassword(evt.target.value)} />\n                </FormGroup>\n                </div>\n                <FormGroup>\n                    <Button className=\"submit-btn\">Submit</Button>\n                </FormGroup>\n                <FormGroup>\n                    <Button className=\"secondary-btn\" onClick={() => history.push(\"/register\")}>New Account</Button>\n                </FormGroup>\n            </Form>\n            {error ? (\n                <Alert className=\"event-validation\" color=\"danger\"> Missing required information</Alert>\n            ) : \"\"}\n        </Container>\n    );\n}","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Dashboard/index.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/services/api.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/routes.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Register/index.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/EventsPage/index.js",["40"],"import React, { useState, useMemo } from 'react';\nimport api from '../../services/api';\nimport { Container, Button, Form, FormGroup, Input, Label, Alert } from 'reactstrap';\nimport cameraIcon from '../../assets/camera.png'\nimport \"./events.css\";\n\nexport default function EventsPage() {\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [price, setPrice] = useState('')\n    const [thumbnail, setThumbnail] = useState(null)\n    const [sport, setSport] = useState('')\n    const [date, setDate] = useState('')\n    const [errorMessage, setErrorMessage] = useState(false)\n\n    const preview = useMemo(() => {\n        return thumbnail ? URL.createObjectURL(thumbnail) : null;\n    }, [thumbnail])\n\n\n    console.log(title, description, price, sport)\n\n    const submitHandler = async (evt) => {\n        evt.preventDefault()\n        const user_id = localStorage.getItem('user');\n\n        const eventData = new FormData();\n\n        eventData.append(\"thumbnail\", thumbnail)\n        eventData.append(\"sport\", sport)\n        eventData.append(\"title\", title)\n        eventData.append(\"price\", price)\n        eventData.append(\"description\", description)\n        eventData.append(\"date\", date)\n\n\n        try {\n            if (title !== \"\" &&\n                description !== \"\" &&\n                price !== \"\" &&\n                sport !== \"\" &&\n                date !== \"\" &&\n                thumbnail !== null\n            ) {\n                console.log(\"Event has been sent\")\n                await api.post(\"/event\", eventData, { headers: { user_id } })\n                console.log(eventData)\n                console.log(\"Event has been saved\")\n            } else {\n                setErrorMessage(true)\n                setTimeout(() => {\n                    setErrorMessage(false)\n                }, 2000)\n\n                console.log(\"Missing required data\")\n            }\n        } catch (error) {\n            Promise.reject(error);\n            console.log(error);\n        }\n    }\n\n\n    return (\n        <Container>\n            <h2>Create your Event</h2>\n            <Form onSubmit={submitHandler}>\n                <FormGroup>\n                    <Label>Upload Image: </Label>\n                    <Label id='thumbnail' style={{ backgroundImage: `url(${preview})` }} className={thumbnail ? 'has-thumbnail' : ''}>\n                        <Input type=\"file\" onChange={evt => setThumbnail(evt.target.files[0])} />\n                        <img src={cameraIcon} style={{ maxWidth: \"50px\" }} alt=\"upload icon image\" />\n                    </Label>\n                </FormGroup>\n                <FormGroup>\n                    <Label>Sport: </Label>\n                    <Input id=\"sport\" type=\"text\" value={sport} placeholder={'Sport name'} onChange={(evt) => setSport(evt.target.value)} />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Title: </Label>\n                    <Input id=\"title\" type=\"text\" value={title} placeholder={'Event Title'} onChange={(evt) => setTitle(evt.target.value)} />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Event description: </Label>\n                    <Input id=\"description\" type=\"text\" value={description} placeholder={'Event Description'} onChange={(evt) => setDescription(evt.target.value)} />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Event price: </Label>\n                    <Input id=\"price\" type=\"text\" value={price} placeholder={'Event Price 0.00'} onChange={(evt) => setPrice(evt.target.value)} />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Event date: </Label>\n                    <Input id=\"date\" type=\"date\" value={date} placeholder={'Event Price $0.00'} onChange={(evt) => setDate(evt.target.value)} />\n                </FormGroup>\n                <Button type=\"submit\">\n                    Create Event\n                </Button>\n            </Form>\n            {errorMessage ? (\n                <Alert className=\"event-validation\" color=\"danger\"> Missing required information</Alert>\n            ) : \"\"}\n        </Container>\n    )\n}",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":9,"column":12,"nodeType":"47","messageId":"48","endLine":9,"endColumn":24},{"ruleId":"49","severity":1,"message":"50","line":72,"column":25,"nodeType":"51","endLine":72,"endColumn":102},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]