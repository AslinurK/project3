[{"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/index.js":"1","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/App.js":"2","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Login/index.js":"3","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Dashboard/index.js":"4","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/services/api.js":"5","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/routes.js":"6","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Register/index.js":"7","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/EventsPage/index.js":"8"},{"size":223,"mtime":1611892036252,"results":"9","hashOfConfig":"10"},{"size":297,"mtime":1611891609857,"results":"11","hashOfConfig":"10"},{"size":2422,"mtime":1611895125894,"results":"12","hashOfConfig":"10"},{"size":2298,"mtime":1611894791944,"results":"13","hashOfConfig":"10"},{"size":117,"mtime":1611887993670,"results":"14","hashOfConfig":"10"},{"size":663,"mtime":1611889461039,"results":"15","hashOfConfig":"10"},{"size":3208,"mtime":1611891971368,"results":"16","hashOfConfig":"10"},{"size":5414,"mtime":1611895839735,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"awv6uh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/index.js",[],["37","38"],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/App.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Login/index.js",["39"],"import React, { useState } from 'react';\nimport api from '../../services/api'\nimport { Alert, Container, Button, Form, FormGroup, Input } from 'reactstrap';\n\nexport default function Login({ history }) {\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [error, setError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState(\"false\")\n\n    const handleSubmit = async evt => {\n        evt.preventDefault();\n        const response = await api.post('/login', { email, password })\n        const userId = response.data._id || false;\n\n        try {\n            if (userId) {\n                localStorage.setItem('user', userId)\n                history.push('/')\n            } else {\n                const { message } = response.data\n                setError(true)\n                setErrorMessage(message)\n                setTimeout(() => {\n                    setError(false)\n                    setErrorMessage(\"\")\n                }, 2000)\n            }\n        } catch (error) {\n            setError(true)\n            setErrorMessage(\"Error, the server returned an error\")\n        }\n    }\n\n    return (\n        <Container>\n            <h2>Login:</h2>\n            <p>Please <strong>Login</strong> into your account</p>\n            <Form onSubmit={handleSubmit}>\n                <div className=\"input-group\">\n                <FormGroup className=\"form-group-\"></FormGroup>\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                    <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Your email\" onChange={evt => setEmail(evt.target.value)} />\n                </FormGroup>\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                    <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Your password\" onChange={evt => setPassword(evt.target.value)} />\n                </FormGroup>\n                </div>\n                <FormGroup>\n                    <Button className=\"submit-btn\">Submit</Button>\n                </FormGroup>\n                <FormGroup>\n                    <Button className=\"secondary-btn\" onClick={() => history.push(\"/register\")}>New Account</Button>\n                </FormGroup>\n            </Form>\n            {error ? (\n                <Alert className=\"event-validation\" color=\"danger\"> Missing required information</Alert>\n            ) : \"\"}\n        </Container>\n    );\n}","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Dashboard/index.js",["40","41","42"],"import React, { useEffect, useState } from 'react';\nimport api from '../../services/api';\nimport moment from 'moment';\nimport { Button, ButtonGroup } from 'reactstrap';\nimport './dashboard.css'\n//Dashboard will show all the events \nexport default function Dashboard({history}) {\n    const [events, setEvents] = useState([]);\n    const user_id = localStorage.getItem('user');\n    const [cSelected, setCSelected] = useState([]);\n    const [rSelected, setRSelected] = useState(null);\n\n    useEffect(() => {\n        getEvents()\n    }, [])\n\n    const filterHandler = (query) => {\n        setRSelected(query)\n        getEvents(query)\n    }\n\n    const getEvents = async (filter) => {\n        const url = filter ? `/dashboard/${filter}` : '/dashboard'\n        const response = await api.get(url, { headers: { user_id } })\n\n        setEvents(response.data)\n    };\n\n    return (\n        <>\n            <div>Filter:\n                <ButtonGroup>\n                        <Button color=\"primary\" onClick={() => filterHandler(null)} active={rSelected === null}>All Sports</Button>\n                        <Button color=\"primary\" onClick={() => filterHandler(\"running\")} active={rSelected === 'running'}>Running</Button>\n                        <Button color=\"primary\" onClick={() => filterHandler(\"cycling\")} active={rSelected === 'cycling'}>Cycling</Button>\n                        <Button color=\"primary\" onClick={() => filterHandler('swimming')} active={rSelected === 'swimming'}>Swimming</Button>\n                </ButtonGroup>\n                <Button color=\"secondary\" onClick={()=> history.push('events')}>Events</Button>\n            </div>\n            <ul className=\"events-list\">\n                {events.map(event => (\n                    <li key={event._id}>\n                        <header style={{ backgroundImage: `url(${event.thumbnail_url})` }} />\n                        <strong>{event.title}</strong>\n                        <span>Event Date: {moment(event.date).format('l')}</span>\n                        <span>Event Price: {parseFloat(event.price).toFixed(2)}</span>\n                        <span>Event Description: {event.description}</span>\n                        <Button color=\"primary\">Subscribe</Button>\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}","/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/services/api.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/routes.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/Register/index.js",[],"/Users/aslinurkeklikci/Desktop/Bootcamp/project3/frontend/src/pages/EventsPage/index.js",["43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":9,"column":12,"nodeType":"50","messageId":"51","endLine":9,"endColumn":24},{"ruleId":"48","severity":1,"message":"52","line":10,"column":12,"nodeType":"50","messageId":"51","endLine":10,"endColumn":21},{"ruleId":"48","severity":1,"message":"53","line":10,"column":23,"nodeType":"50","messageId":"51","endLine":10,"endColumn":35},{"ruleId":"54","severity":1,"message":"55","line":15,"column":8,"nodeType":"56","endLine":15,"endColumn":10,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":75,"column":29,"nodeType":"60","endLine":75,"endColumn":106},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'errorMessage' is assigned a value but never used.","Identifier","unusedVar","'cSelected' is assigned a value but never used.","'setCSelected' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEvents'. Either include it or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [getEvents]",{"range":"66","text":"67"},[531,533],"[getEvents]"]